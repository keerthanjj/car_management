{
	"info": {
		"_postman_id": "12b3c2c4-7324-4654-a734-de94735628e9",
		"name": "Car_management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33114980"
	},
	"item": [
		{
			"name": "status",
			"item": [
				{
					"name": "status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.., njoy pandagowwwww\", function(){\r",
									"    pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "add_car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Case 1: Status Code is 200\r",
									"pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Case 2: Response has success message\r",
									"pm.test(\"Response has success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Tata Vista added successfully\");\r",
									"});\r",
									"\r",
									"// Test Case 3: Response contains VIN\r",
									"pm.test(\"Response contains VIN\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"vin\").that.is.a(\"string\");\r",
									"    pm.environment.set(\"vin\", jsonData.vin); // Store VIN for further test cases\r",
									"});\r",
									"\r",
									"// Test Case 4: Response is JSON\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test Case 5: Content-Type is application/json\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"make\": \"Tata\",\r\n        \"model\": \"Vista\",\r\n        \"color\": \"Red\",\r\n        \"price\": 400000,\r\n        \"mileage_in_km\": 21,\r\n        \"year\": 2016,\r\n        \"type_of_car\": \"Sedan\",\r\n        \"type_of_fuel\": \"Diesel\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/admin/add_car",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admin",
								"add_car"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var vin = pm.environment.get(\"vin\");\r",
									"// Test Case 1: Status Code is 200\r",
									"pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Case 2: Response Contains Car Details\r",
									"pm.test(\"Response Contains Car Details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"make\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"model\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"color\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"price\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"mileage_in_km\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"year\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"type_of_car\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"type_of_fuel\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Test Case 3: Response is JSON\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test Case 4: Content-Type Header is application/json\r",
									"pm.test(\"Content-Type Header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test Case 5: Car Details Match the Added Car\r",
									"pm.test(\"Car Details Match the Added Car\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.make).to.equal(\"Tata\");\r",
									"    pm.expect(jsonData.model).to.equal(\"Vista\");\r",
									"    pm.expect(jsonData.color).to.equal(\"Red\");\r",
									"    pm.expect(jsonData.price).to.equal(\"400000.00\");\r",
									"    pm.expect(jsonData.mileage_in_km).to.equal(21);\r",
									"    pm.expect(jsonData.year).to.equal(2016);\r",
									"    pm.expect(jsonData.type_of_car).to.equal(\"Sedan\");\r",
									"    pm.expect(jsonData.type_of_fuel).to.equal(\"Diesel\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/admin/get_car?vin={{vin}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admin",
								"get_car"
							],
							"query": [
								{
									"key": "vin",
									"value": "{{vin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update_car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var vin = pm.environment.get(\"vin\");\r",
									"\r",
									"// Test Case 1: Status Code is 200\r",
									"pm.test(\"Update Car - Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Case 2: Response has success message\r",
									"pm.test(\"Update Car - Response has success message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"Car updated successfully\");\r",
									"});\r",
									"\r",
									"// Test Case 3: Response is JSON\r",
									"pm.test(\"Update Car - Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test Case 4: Content-Type is application/json\r",
									"pm.test(\"Update Car - Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test Case 5: Store VIN for further use\r",
									"pm.test(\"Update Car - Store VIN for further use\", function () {\r",
									"    pm.environment.set(\"vin\", vin);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"make\": \"Tata\",\r\n    \"model\": \"Vista\",\r\n    \"color\": \"Blue\",\r\n    \"price\": 400000,\r\n    \"mileage_in_km\": 22,\r\n    \"year\": 2016,\r\n    \"type_of_car\": \"Sedan\",\r\n    \"type_of_fuel\": \"Diesel\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/admin/update_car?vin={{vin}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admin",
								"update_car"
							],
							"query": [
								{
									"key": "vin",
									"value": "{{vin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var vin = pm.environment.get(\"vin\");\r",
									"\r",
									"// Test Case 1: Status Code is 200\r",
									"pm.test(\"Get Car - Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Case 2: Response Contains Car Details\r",
									"pm.test(\"Get Car - Response Contains Car Details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"make\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"model\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"color\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"price\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"mileage_in_km\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"year\").that.is.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"type_of_car\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"type_of_fuel\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"// Test Case 3: Response is JSON\r",
									"pm.test(\"Get Car - Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Test Case 4: Content-Type Header is application/json\r",
									"pm.test(\"Get Car - Content-Type Header is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test Case 5: Car Details Match the Updated Car\r",
									"pm.test(\"Get Car - Car Details Match the Updated Car\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.make).to.equal(\"Tata\");\r",
									"    pm.expect(jsonData.model).to.equal(\"Vista\");\r",
									"    pm.expect(jsonData.price).to.equal(\"400000.00\");\r",
									"    pm.expect(jsonData.mileage_in_km).to.equal(22);\r",
									"    pm.expect(jsonData.year).to.equal(2016);\r",
									"    pm.expect(jsonData.type_of_car).to.equal(\"Sedan\");\r",
									"    pm.expect(jsonData.type_of_fuel).to.equal(\"Diesel\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/admin/get_car?vin={{vin}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admin",
								"get_car"
							],
							"query": [
								{
									"key": "vin",
									"value": "{{vin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_all_cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has cars array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"cars\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cars array is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cars.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/admin/all_cars",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admin",
								"all_cars"
							]
						}
					},
					"response": []
				},
				{
					"name": "current_bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has bookings array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"bookings\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Bookings array is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookings.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/admin/current_bookings",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"admin",
								"current_bookings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "get_all_cars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has cars array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"cars\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cars array is not empty\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cars.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Each car has a mileage of at least 20 and fuel type Petrol\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.cars.forEach(car => {\r",
									"        pm.expect(car[5]).to.be.at.least(20);\r",
									"        pm.expect(car[8]).to.eql(\"Petrol\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/user/all_cars?min_mileage=20&type_of_fuel=Petrol",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"all_cars"
							],
							"query": [
								{
									"key": "make",
									"value": "Tata",
									"disabled": true
								},
								{
									"key": "min_mileage",
									"value": "20"
								},
								{
									"key": "type_of_fuel",
									"value": "Petrol"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "book_car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message and booking_id\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Booking created successfully\");\r",
									"    pm.expect(jsonData).to.have.property(\"booking_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Booking ID is a number\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.booking_id).to.be.a(\"number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_name\": \"Keerthan\",\r\n    \"phone_number\": \"8919444686\",\r\n     \"vin\":\"3323\", // Replace with the actual VIN of the car\r\n    \"address\": \"123 Main Street, City, Country\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/user/book_car",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"user",
								"book_car"
							],
							"query": [
								{
									"key": "vin",
									"value": "{{vin}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_Url",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		},
		{
			"key": "car_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "make",
			"value": "",
			"type": "string"
		},
		{
			"key": "model",
			"value": "",
			"type": "string"
		},
		{
			"key": "price",
			"value": "",
			"type": "string"
		},
		{
			"key": "year",
			"value": "",
			"type": "string"
		},
		{
			"key": "type_of_car",
			"value": "",
			"type": "string"
		},
		{
			"key": "type_of_fuel",
			"value": "",
			"type": "string"
		}
	]
}